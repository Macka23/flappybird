@startuml
' Diagramme UML des classes du projet FlappyBird

class GameView {
    - thread: Thread
    - drawing: Boolean
    - canvas: Canvas
    - paint: Paint
    - allObjects: AllObjects

    + run()
    + gameOver()
    + updatePositions(elapsedTimeMS: Double)
    + returnEndGame(): Boolean
    + createPipe()
    + onTouchEvent(event: MotionEvent?): Boolean
    + draw()
    + pause()
    + resume()
}

class AllObjects {
    - context: Context
    - canvas: Canvas
    - holder: SurfaceHolder
    - bird: Bird
    - ListOfPipes: MutableList<Obstacle>
    - score: Score
}

class Bird {
    - x: Float
    - y: Float

    + update()
    + draw(canvas: Canvas, paint: Paint)
    + jump()
    + returnCollision(pipe: Obstacle): Boolean
}

abstract class Obstacle {
    + update()
    + draw(canvas: Canvas)
}

class Pipe {
}

class PipeMoving {
}

class PipeFactory {
    + createPipe(type: PipeType): Obstacle
}

class Score {
    - yourScore: Int
    - textPaint: Paint

    + update()
    + draw(canvas: Canvas, paint: Paint)
}

class GameRun {
    - allObjects: AllObjects
    - totalElapsedTime: Double
    - previousFrameTime: Long

    + run()
    + gameOver()
    + updatePositions(elapsedTimeMS: Double)
    + returnEndGame(): Boolean
    + createPipe()
}

enum PipeType {
    STATIC
    MOVING
}

GameView --> AllObjects
AllObjects --> Bird
AllObjects --> Score
AllObjects --> Obstacle
Obstacle <|-- Pipe
Obstacle <|-- PipeMoving
PipeFactory --> Obstacle
GameRun --> AllObjects
@enduml