@startuml
' Diagramme UML des classes du projet FlappyBird

class GameView {
    - thread: Thread
    - drawing: Boolean
    - canvas: Canvas
    - allObjects: AllObjects

    + run()
    + pause()
    + resume()
    + onTouchEvent(event: MotionEvent?): Boolean
}

class AllObjects {
    - context: Context
    - canvas: Canvas
    - holder: SurfaceHolder
    - bird: Bird
    - ListOfPipes: MutableList<Obstacle>
    - score: Score
}

class Bird {
    - x: Float
    - y: Float
    - ascendingState: Boolean

    + update()
    + jump()
    + draw(canvas: Canvas, paint: Paint)
    + returnCollision(pipe: Obstacle): Boolean
}

abstract class Obstacle {
    + update()
    + draw(canvas: Canvas)
}

class Pipe {
}

class PipeMoving {
}

class Score {
    - yourScore: Int

    + update()
    + draw(canvas: Canvas, paint: Paint)
}

class ScoreObserver {
    - mediaPlayer: MediaPlayer?

    + onScoreChanged(score: Int)
    + onGameOver()
}

class GameRun {
    - allObjects: AllObjects

    + run()
}

GameView --> AllObjects
AllObjects --> Bird
AllObjects --> Score
AllObjects --> Obstacle
Obstacle <|-- Pipe
Obstacle <|-- PipeMoving
AllObjects --> ScoreObserver
GameRun --> AllObjects
@enduml