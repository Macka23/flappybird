@startuml
' Diagramme UML des classes du projet FlappyBird (réorganisé)

class GameView {
    "constuctor" GameView(context: Context, attributes: AttributeSet?, defStyleAttr: Int)
    - thread: Thread
    - drawing: Boolean
    - canvas: Canvas
    - allObjects: AllObjects
    - gameRun: GameRun
    - gameDisplay: GameDisplay

    + run()
    + pause()
    + resume()
    + onTouchEvent(event: MotionEvent?): Boolean
}

class AllObjects {
    "constuctor" AllObjects (context: Context, var canvas: Canvas, holder: SurfaceHolder)
    + bird: Bird
    + ListOfPipes: MutableList<Pipe>
    + score: Score
    - scoreObserver: ScoreObserver
}

class GameRun {
    "constuctor" GameRun(private val allObjects: AllObjects)
    - previousFrameTime: Long
    - gameMode: PipeType

    + setTime()
    + run()
    -gameOver()
    -returnEndGame():Boolean
    -createPipe()
}

class GameDisplay {
    "constuctor" GameDisplay(val allObjects : AllObjects)
    - paint: Paint

    + draw()
}

abstract class GameObject {
    "constuctor" GameObject(var x: Float, var y: Float, protected var width: Float, protected var height: Float)

    + returnCollision(obstacle: Obstacle): Boolean
}

class Bird {
    "constuctor" Bird(x: Float, y: Float)
    + ascendingState: Boolean
    + oldY: Float
    - gravity: Float
    - jumpPower: Float
    - offsetHitbox: Float

    -updateHitBox()
}

class Score {
    + yourScore: Int
    - textPaint: Paint
    - observers: MutableList<GameObserver>

    + clearObservers()
}

class ScoreObserver {
    "constuctor" ScoreObserver(private val context: Context)
    - mediaPlayer: MediaPlayer

    - playSound()
}

abstract class Obstacle {
    + allShapesForOneObstacle: ArrayList<RectF>
    # color: Int
}

abstract class Pipe {
    + Xpos: Float
    + Ypos: Float
    + width: Float
    # lowerShape: RectF
    # upperShape: RectF
    # firstLip: RectF
    # lastLip: RectF
    # pipeSpeedY: Float
    # pipeSpeedX: Float
}

class HorizontalPipe {
    - lenght: Float
    - opening: Float
}

class PipeMoving {
    - upperShapeHeight: Float
    - inverter: Float
}

class StaticPipe {
    - upperShapeHeight
}

class PipeFactory {
    + createPipe(type: PipeType): Pipe
}

enum PipeType {
    STATIC
    MOVING
    BLOC
}

class SkinManager {
    - skinColors: List<Int>
    - selectedIndex: Int

    + getSkin(index: Int)
    + getCurrentColor(): Int
    + getAvailableColor(): List<Int>
    + getCurrentIndex(): Int
}

class GameStateManager {
    - currentState: GameState

    + updateState(score: Int)
    + getPipeType(): PipeType
}

abstract class State {
}

class EasyState {
}

class MediumState {
}

class HardState {
}

interface Drawable {
    + draw(canvas: Canvas, paint: Paint)
}

interface Updatable {
    + update(t: Int?)
}

interface Observable {
    + addObserver(observer: GameObserver)
    + removeObserver(observer: GameObserver)
    + notifyObservers()
}

interface GameObserver {
    + onScoreChanged(score: Int)
    + onGameOver()
}

interface GameState {
    + getPipeType(): PipeType
}

' Relations entre les classes et interfaces
GameDisplay -left-* GameView
GameRun -right-* GameView
AllObjects -up-* GameView

Obstacle <|-- Pipe
Pipe <|-- HorizontalPipe
Pipe <|-- PipeMoving
Pipe <|-- StaticPipe
Updatable <.. Pipe
Drawable <.. Obstacle

PipeFactory --> Pipe
PipeFactory <-- GameRun
PipeFactory ..> PipeType

GameObject <|-- Bird
GameObject <|-- Score
Drawable <.. GameObject
Updatable <.. GameObject

AllObjects *-- Bird
AllObjects *-- "1" Score
AllObjects *-- "1..n" Pipe
AllObjects *-- ScoreObserver

Observable <.. Score
GameObserver <.. ScoreObserver

SkinManager <-- Bird

GameRun *-- State
State <|-- EasyState
State <|-- MediumState
State <|-- HardState
GameState <.. State

@enduml